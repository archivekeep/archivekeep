// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: api.proto

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PersonalAccessTokenServiceClient is the client API for PersonalAccessTokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PersonalAccessTokenServiceClient interface {
	CreatePersonalAccessToken(ctx context.Context, in *CreatePersonalAccessTokenRequest, opts ...grpc.CallOption) (*PersonalAccessToken, error)
	DeletePersonalAccessToken(ctx context.Context, in *DeletePersonalAccessTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type personalAccessTokenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPersonalAccessTokenServiceClient(cc grpc.ClientConnInterface) PersonalAccessTokenServiceClient {
	return &personalAccessTokenServiceClient{cc}
}

func (c *personalAccessTokenServiceClient) CreatePersonalAccessToken(ctx context.Context, in *CreatePersonalAccessTokenRequest, opts ...grpc.CallOption) (*PersonalAccessToken, error) {
	out := new(PersonalAccessToken)
	err := c.cc.Invoke(ctx, "/archivekeep.PersonalAccessTokenService/CreatePersonalAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *personalAccessTokenServiceClient) DeletePersonalAccessToken(ctx context.Context, in *DeletePersonalAccessTokenRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/archivekeep.PersonalAccessTokenService/DeletePersonalAccessToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PersonalAccessTokenServiceServer is the server API for PersonalAccessTokenService service.
// All implementations must embed UnimplementedPersonalAccessTokenServiceServer
// for forward compatibility
type PersonalAccessTokenServiceServer interface {
	CreatePersonalAccessToken(context.Context, *CreatePersonalAccessTokenRequest) (*PersonalAccessToken, error)
	DeletePersonalAccessToken(context.Context, *DeletePersonalAccessTokenRequest) (*empty.Empty, error)
	mustEmbedUnimplementedPersonalAccessTokenServiceServer()
}

// UnimplementedPersonalAccessTokenServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPersonalAccessTokenServiceServer struct {
}

func (UnimplementedPersonalAccessTokenServiceServer) CreatePersonalAccessToken(context.Context, *CreatePersonalAccessTokenRequest) (*PersonalAccessToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePersonalAccessToken not implemented")
}
func (UnimplementedPersonalAccessTokenServiceServer) DeletePersonalAccessToken(context.Context, *DeletePersonalAccessTokenRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePersonalAccessToken not implemented")
}
func (UnimplementedPersonalAccessTokenServiceServer) mustEmbedUnimplementedPersonalAccessTokenServiceServer() {
}

// UnsafePersonalAccessTokenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PersonalAccessTokenServiceServer will
// result in compilation errors.
type UnsafePersonalAccessTokenServiceServer interface {
	mustEmbedUnimplementedPersonalAccessTokenServiceServer()
}

func RegisterPersonalAccessTokenServiceServer(s grpc.ServiceRegistrar, srv PersonalAccessTokenServiceServer) {
	s.RegisterService(&PersonalAccessTokenService_ServiceDesc, srv)
}

func _PersonalAccessTokenService_CreatePersonalAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonalAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccessTokenServiceServer).CreatePersonalAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivekeep.PersonalAccessTokenService/CreatePersonalAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccessTokenServiceServer).CreatePersonalAccessToken(ctx, req.(*CreatePersonalAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PersonalAccessTokenService_DeletePersonalAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePersonalAccessTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PersonalAccessTokenServiceServer).DeletePersonalAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivekeep.PersonalAccessTokenService/DeletePersonalAccessToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PersonalAccessTokenServiceServer).DeletePersonalAccessToken(ctx, req.(*DeletePersonalAccessTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PersonalAccessTokenService_ServiceDesc is the grpc.ServiceDesc for PersonalAccessTokenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PersonalAccessTokenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archivekeep.PersonalAccessTokenService",
	HandlerType: (*PersonalAccessTokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePersonalAccessToken",
			Handler:    _PersonalAccessTokenService_CreatePersonalAccessToken_Handler,
		},
		{
			MethodName: "DeletePersonalAccessToken",
			Handler:    _PersonalAccessTokenService_DeletePersonalAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

// ArchiveServiceClient is the client API for ArchiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchiveServiceClient interface {
	ListArchives(ctx context.Context, in *ListArchivesRequest, opts ...grpc.CallOption) (*ListArchivesResponse, error)
	GetArchive(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error)
	ListArchiveFiles(ctx context.Context, in *ListArchiveFilesRequest, opts ...grpc.CallOption) (*ListArchiveFilesResponse, error)
	DownloadArchiveFile(ctx context.Context, in *DownloadArchiveFileRequest, opts ...grpc.CallOption) (ArchiveService_DownloadArchiveFileClient, error)
	UploadArchiveFile(ctx context.Context, opts ...grpc.CallOption) (ArchiveService_UploadArchiveFileClient, error)
	MoveArchiveFile(ctx context.Context, in *MoveArchiveFileRequest, opts ...grpc.CallOption) (*ArchiveFile, error)
}

type archiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchiveServiceClient(cc grpc.ClientConnInterface) ArchiveServiceClient {
	return &archiveServiceClient{cc}
}

func (c *archiveServiceClient) ListArchives(ctx context.Context, in *ListArchivesRequest, opts ...grpc.CallOption) (*ListArchivesResponse, error) {
	out := new(ListArchivesResponse)
	err := c.cc.Invoke(ctx, "/archivekeep.ArchiveService/ListArchives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) GetArchive(ctx context.Context, in *GetArchiveRequest, opts ...grpc.CallOption) (*GetArchiveResponse, error) {
	out := new(GetArchiveResponse)
	err := c.cc.Invoke(ctx, "/archivekeep.ArchiveService/GetArchive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) ListArchiveFiles(ctx context.Context, in *ListArchiveFilesRequest, opts ...grpc.CallOption) (*ListArchiveFilesResponse, error) {
	out := new(ListArchiveFilesResponse)
	err := c.cc.Invoke(ctx, "/archivekeep.ArchiveService/ListArchiveFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) DownloadArchiveFile(ctx context.Context, in *DownloadArchiveFileRequest, opts ...grpc.CallOption) (ArchiveService_DownloadArchiveFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArchiveService_ServiceDesc.Streams[0], "/archivekeep.ArchiveService/DownloadArchiveFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &archiveServiceDownloadArchiveFileClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ArchiveService_DownloadArchiveFileClient interface {
	Recv() (*DownloadArchiveFileResponse, error)
	grpc.ClientStream
}

type archiveServiceDownloadArchiveFileClient struct {
	grpc.ClientStream
}

func (x *archiveServiceDownloadArchiveFileClient) Recv() (*DownloadArchiveFileResponse, error) {
	m := new(DownloadArchiveFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *archiveServiceClient) UploadArchiveFile(ctx context.Context, opts ...grpc.CallOption) (ArchiveService_UploadArchiveFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &ArchiveService_ServiceDesc.Streams[1], "/archivekeep.ArchiveService/UploadArchiveFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &archiveServiceUploadArchiveFileClient{stream}
	return x, nil
}

type ArchiveService_UploadArchiveFileClient interface {
	Send(*UploadArchiveFileRequest) error
	CloseAndRecv() (*ArchiveFile, error)
	grpc.ClientStream
}

type archiveServiceUploadArchiveFileClient struct {
	grpc.ClientStream
}

func (x *archiveServiceUploadArchiveFileClient) Send(m *UploadArchiveFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *archiveServiceUploadArchiveFileClient) CloseAndRecv() (*ArchiveFile, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ArchiveFile)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *archiveServiceClient) MoveArchiveFile(ctx context.Context, in *MoveArchiveFileRequest, opts ...grpc.CallOption) (*ArchiveFile, error) {
	out := new(ArchiveFile)
	err := c.cc.Invoke(ctx, "/archivekeep.ArchiveService/MoveArchiveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveServiceServer is the server API for ArchiveService service.
// All implementations must embed UnimplementedArchiveServiceServer
// for forward compatibility
type ArchiveServiceServer interface {
	ListArchives(context.Context, *ListArchivesRequest) (*ListArchivesResponse, error)
	GetArchive(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error)
	ListArchiveFiles(context.Context, *ListArchiveFilesRequest) (*ListArchiveFilesResponse, error)
	DownloadArchiveFile(*DownloadArchiveFileRequest, ArchiveService_DownloadArchiveFileServer) error
	UploadArchiveFile(ArchiveService_UploadArchiveFileServer) error
	MoveArchiveFile(context.Context, *MoveArchiveFileRequest) (*ArchiveFile, error)
	mustEmbedUnimplementedArchiveServiceServer()
}

// UnimplementedArchiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArchiveServiceServer struct {
}

func (UnimplementedArchiveServiceServer) ListArchives(context.Context, *ListArchivesRequest) (*ListArchivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchives not implemented")
}
func (UnimplementedArchiveServiceServer) GetArchive(context.Context, *GetArchiveRequest) (*GetArchiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArchive not implemented")
}
func (UnimplementedArchiveServiceServer) ListArchiveFiles(context.Context, *ListArchiveFilesRequest) (*ListArchiveFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArchiveFiles not implemented")
}
func (UnimplementedArchiveServiceServer) DownloadArchiveFile(*DownloadArchiveFileRequest, ArchiveService_DownloadArchiveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadArchiveFile not implemented")
}
func (UnimplementedArchiveServiceServer) UploadArchiveFile(ArchiveService_UploadArchiveFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadArchiveFile not implemented")
}
func (UnimplementedArchiveServiceServer) MoveArchiveFile(context.Context, *MoveArchiveFileRequest) (*ArchiveFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoveArchiveFile not implemented")
}
func (UnimplementedArchiveServiceServer) mustEmbedUnimplementedArchiveServiceServer() {}

// UnsafeArchiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchiveServiceServer will
// result in compilation errors.
type UnsafeArchiveServiceServer interface {
	mustEmbedUnimplementedArchiveServiceServer()
}

func RegisterArchiveServiceServer(s grpc.ServiceRegistrar, srv ArchiveServiceServer) {
	s.RegisterService(&ArchiveService_ServiceDesc, srv)
}

func _ArchiveService_ListArchives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArchivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).ListArchives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivekeep.ArchiveService/ListArchives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).ListArchives(ctx, req.(*ListArchivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_GetArchive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArchiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).GetArchive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivekeep.ArchiveService/GetArchive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).GetArchive(ctx, req.(*GetArchiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_ListArchiveFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArchiveFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).ListArchiveFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivekeep.ArchiveService/ListArchiveFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).ListArchiveFiles(ctx, req.(*ListArchiveFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_DownloadArchiveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadArchiveFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ArchiveServiceServer).DownloadArchiveFile(m, &archiveServiceDownloadArchiveFileServer{stream})
}

type ArchiveService_DownloadArchiveFileServer interface {
	Send(*DownloadArchiveFileResponse) error
	grpc.ServerStream
}

type archiveServiceDownloadArchiveFileServer struct {
	grpc.ServerStream
}

func (x *archiveServiceDownloadArchiveFileServer) Send(m *DownloadArchiveFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ArchiveService_UploadArchiveFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ArchiveServiceServer).UploadArchiveFile(&archiveServiceUploadArchiveFileServer{stream})
}

type ArchiveService_UploadArchiveFileServer interface {
	SendAndClose(*ArchiveFile) error
	Recv() (*UploadArchiveFileRequest, error)
	grpc.ServerStream
}

type archiveServiceUploadArchiveFileServer struct {
	grpc.ServerStream
}

func (x *archiveServiceUploadArchiveFileServer) SendAndClose(m *ArchiveFile) error {
	return x.ServerStream.SendMsg(m)
}

func (x *archiveServiceUploadArchiveFileServer) Recv() (*UploadArchiveFileRequest, error) {
	m := new(UploadArchiveFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ArchiveService_MoveArchiveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoveArchiveFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).MoveArchiveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archivekeep.ArchiveService/MoveArchiveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).MoveArchiveFile(ctx, req.(*MoveArchiveFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ArchiveService_ServiceDesc is the grpc.ServiceDesc for ArchiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archivekeep.ArchiveService",
	HandlerType: (*ArchiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListArchives",
			Handler:    _ArchiveService_ListArchives_Handler,
		},
		{
			MethodName: "GetArchive",
			Handler:    _ArchiveService_GetArchive_Handler,
		},
		{
			MethodName: "ListArchiveFiles",
			Handler:    _ArchiveService_ListArchiveFiles_Handler,
		},
		{
			MethodName: "MoveArchiveFile",
			Handler:    _ArchiveService_MoveArchiveFile_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DownloadArchiveFile",
			Handler:       _ArchiveService_DownloadArchiveFile_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UploadArchiveFile",
			Handler:       _ArchiveService_UploadArchiveFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
